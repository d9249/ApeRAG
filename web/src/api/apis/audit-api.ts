/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuditLog } from '../models';
// @ts-ignore
import type { AuditLogList } from '../models';
/**
 * AuditApi - axios parameter creator
 * @export
 */
export const AuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {string} auditId Audit log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLog: async (auditId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditId' is not null or undefined
            assertParamExists('getAuditLog', 'auditId', auditId)
            const localVarPath = `/audit-logs/{audit_id}`
                .replace(`{${"audit_id"}}`, encodeURIComponent(String(auditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List audit logs with pagination, sorting and filtering options
         * @summary List audit logs
         * @param {number} [page] Page number (1-based)
         * @param {number} [pageSize] Number of items per page
         * @param {ListAuditLogsSortByEnum} [sortBy] Field to sort by
         * @param {ListAuditLogsSortOrderEnum} [sortOrder] Sort order
         * @param {string} [search] Search in API name or path
         * @param {string} [userId] Filter by user ID
         * @param {ListAuditLogsResourceTypeEnum} [resourceType] Filter by resource type
         * @param {string} [apiName] Filter by API name
         * @param {ListAuditLogsHttpMethodEnum} [httpMethod] Filter by HTTP method
         * @param {number} [statusCode] Filter by HTTP status code
         * @param {string} [startDate] Filter by start date
         * @param {string} [endDate] Filter by end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (page?: number, pageSize?: number, sortBy?: ListAuditLogsSortByEnum, sortOrder?: ListAuditLogsSortOrderEnum, search?: string, userId?: string, resourceType?: ListAuditLogsResourceTypeEnum, apiName?: string, httpMethod?: ListAuditLogsHttpMethodEnum, statusCode?: number, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audit-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['api_name'] = apiName;
            }

            if (httpMethod !== undefined) {
                localVarQueryParameter['http_method'] = httpMethod;
            }

            if (statusCode !== undefined) {
                localVarQueryParameter['status_code'] = statusCode;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditApi - functional programming interface
 * @export
 */
export const AuditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {string} auditId Audit log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditLog(auditId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditLog(auditId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditApi.getAuditLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List audit logs with pagination, sorting and filtering options
         * @summary List audit logs
         * @param {number} [page] Page number (1-based)
         * @param {number} [pageSize] Number of items per page
         * @param {ListAuditLogsSortByEnum} [sortBy] Field to sort by
         * @param {ListAuditLogsSortOrderEnum} [sortOrder] Sort order
         * @param {string} [search] Search in API name or path
         * @param {string} [userId] Filter by user ID
         * @param {ListAuditLogsResourceTypeEnum} [resourceType] Filter by resource type
         * @param {string} [apiName] Filter by API name
         * @param {ListAuditLogsHttpMethodEnum} [httpMethod] Filter by HTTP method
         * @param {number} [statusCode] Filter by HTTP status code
         * @param {string} [startDate] Filter by start date
         * @param {string} [endDate] Filter by end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(page?: number, pageSize?: number, sortBy?: ListAuditLogsSortByEnum, sortOrder?: ListAuditLogsSortOrderEnum, search?: string, userId?: string, resourceType?: ListAuditLogsResourceTypeEnum, apiName?: string, httpMethod?: ListAuditLogsHttpMethodEnum, statusCode?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(page, pageSize, sortBy, sortOrder, search, userId, resourceType, apiName, httpMethod, statusCode, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditApi.listAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuditApi - factory interface
 * @export
 */
export const AuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditApiFp(configuration)
    return {
        /**
         * Get a specific audit log by ID
         * @summary Get audit log detail
         * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog> {
            return localVarFp.getAuditLog(requestParameters.auditId, options).then((request) => request(axios, basePath));
        },
        /**
         * List audit logs with pagination, sorting and filtering options
         * @summary List audit logs
         * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(requestParameters: AuditApiListAuditLogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogList> {
            return localVarFp.listAuditLogs(requestParameters.page, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.search, requestParameters.userId, requestParameters.resourceType, requestParameters.apiName, requestParameters.httpMethod, requestParameters.statusCode, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditApi - interface
 * @export
 * @interface AuditApi
 */
export interface AuditApiInterface {
    /**
     * Get a specific audit log by ID
     * @summary Get audit log detail
     * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApiInterface
     */
    getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog>;

    /**
     * List audit logs with pagination, sorting and filtering options
     * @summary List audit logs
     * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApiInterface
     */
    listAuditLogs(requestParameters?: AuditApiListAuditLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogList>;

}

/**
 * Request parameters for getAuditLog operation in AuditApi.
 * @export
 * @interface AuditApiGetAuditLogRequest
 */
export interface AuditApiGetAuditLogRequest {
    /**
     * Audit log ID
     * @type {string}
     * @memberof AuditApiGetAuditLog
     */
    readonly auditId: string
}

/**
 * Request parameters for listAuditLogs operation in AuditApi.
 * @export
 * @interface AuditApiListAuditLogsRequest
 */
export interface AuditApiListAuditLogsRequest {
    /**
     * Page number (1-based)
     * @type {number}
     * @memberof AuditApiListAuditLogs
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof AuditApiListAuditLogs
     */
    readonly pageSize?: number

    /**
     * Field to sort by
     * @type {'created' | 'duration' | 'status_code' | 'api_name'}
     * @memberof AuditApiListAuditLogs
     */
    readonly sortBy?: ListAuditLogsSortByEnum

    /**
     * Sort order
     * @type {'asc' | 'desc'}
     * @memberof AuditApiListAuditLogs
     */
    readonly sortOrder?: ListAuditLogsSortOrderEnum

    /**
     * Search in API name or path
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly search?: string

    /**
     * Filter by user ID
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly userId?: string

    /**
     * Filter by resource type
     * @type {'collection' | 'document' | 'bot' | 'chat' | 'message' | 'api_key' | 'llm' | 'llm_provider' | 'llm_provider_model' | 'model_service_provider' | 'user' | 'flow' | 'search' | 'index'}
     * @memberof AuditApiListAuditLogs
     */
    readonly resourceType?: ListAuditLogsResourceTypeEnum

    /**
     * Filter by API name
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly apiName?: string

    /**
     * Filter by HTTP method
     * @type {'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'}
     * @memberof AuditApiListAuditLogs
     */
    readonly httpMethod?: ListAuditLogsHttpMethodEnum

    /**
     * Filter by HTTP status code
     * @type {number}
     * @memberof AuditApiListAuditLogs
     */
    readonly statusCode?: number

    /**
     * Filter by start date
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly startDate?: string

    /**
     * Filter by end date
     * @type {string}
     * @memberof AuditApiListAuditLogs
     */
    readonly endDate?: string
}

/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export class AuditApi extends BaseAPI implements AuditApiInterface {
    /**
     * Get a specific audit log by ID
     * @summary Get audit log detail
     * @param {AuditApiGetAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public getAuditLog(requestParameters: AuditApiGetAuditLogRequest, options?: RawAxiosRequestConfig) {
        return AuditApiFp(this.configuration).getAuditLog(requestParameters.auditId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List audit logs with pagination, sorting and filtering options
     * @summary List audit logs
     * @param {AuditApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public listAuditLogs(requestParameters: AuditApiListAuditLogsRequest = {}, options?: RawAxiosRequestConfig) {
        return AuditApiFp(this.configuration).listAuditLogs(requestParameters.page, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.search, requestParameters.userId, requestParameters.resourceType, requestParameters.apiName, requestParameters.httpMethod, requestParameters.statusCode, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListAuditLogsSortByEnum = {
    created: 'created',
    duration: 'duration',
    status_code: 'status_code',
    api_name: 'api_name'
} as const;
export type ListAuditLogsSortByEnum = typeof ListAuditLogsSortByEnum[keyof typeof ListAuditLogsSortByEnum];
/**
 * @export
 */
export const ListAuditLogsSortOrderEnum = {
    asc: 'asc',
    desc: 'desc'
} as const;
export type ListAuditLogsSortOrderEnum = typeof ListAuditLogsSortOrderEnum[keyof typeof ListAuditLogsSortOrderEnum];
/**
 * @export
 */
export const ListAuditLogsResourceTypeEnum = {
    collection: 'collection',
    document: 'document',
    bot: 'bot',
    chat: 'chat',
    message: 'message',
    api_key: 'api_key',
    llm: 'llm',
    llm_provider: 'llm_provider',
    llm_provider_model: 'llm_provider_model',
    model_service_provider: 'model_service_provider',
    user: 'user',
    flow: 'flow',
    search: 'search',
    index: 'index'
} as const;
export type ListAuditLogsResourceTypeEnum = typeof ListAuditLogsResourceTypeEnum[keyof typeof ListAuditLogsResourceTypeEnum];
/**
 * @export
 */
export const ListAuditLogsHttpMethodEnum = {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE',
    PATCH: 'PATCH'
} as const;
export type ListAuditLogsHttpMethodEnum = typeof ListAuditLogsHttpMethodEnum[keyof typeof ListAuditLogsHttpMethodEnum];
