/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { GraphLabelsResponse } from '../models';
// @ts-ignore
import type { KnowledgeGraph } from '../models';
// @ts-ignore
import type { MergeSuggestionsRequest } from '../models';
// @ts-ignore
import type { MergeSuggestionsResponse } from '../models';
// @ts-ignore
import type { NodeMergeRequest } from '../models';
// @ts-ignore
import type { NodeMergeResponse } from '../models';
// @ts-ignore
import type { SuggestionActionRequest } from '../models';
// @ts-ignore
import type { SuggestionActionResponse } from '../models';
/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve knowledge graph data. Two modes are supported: 1. Overview mode (default): Uses the entire graph (\"*\") and intelligently selects the most important nodes 2. Subgraph mode: When \'label\' is provided, returns a subgraph centered on that node  Node selection prioritization: 1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes 2. For subgraph: nodes within specified hops from the starting node  The overview mode is optimized for visualization performance by prioritizing well-connected nodes. 
         * @summary Get knowledge graph
         * @param {string} collectionId Collection ID
         * @param {string} [label] Label of the starting node for subgraph exploration. Use \&quot;*\&quot; (default) for overview mode showing the most important nodes in the entire graph. Provide a specific entity name for subgraph mode. 
         * @param {number} [maxNodes] Maximum number of nodes to return
         * @param {number} [maxDepth] Maximum depth when in subgraph mode (when specific label is provided). Ignored in overview mode (when label is \&quot;*\&quot;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsGet: async (collectionId: string, label?: string, maxNodes?: number, maxDepth?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/graphs`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (maxNodes !== undefined) {
                localVarQueryParameter['max_nodes'] = maxNodes;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max_depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all available node labels in the collection\'s knowledge graph
         * @summary Get knowledge graph labels
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsLabelsGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsLabelsGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/graphs/labels`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity. Returns confidence-ranked merge suggestions for user review and decision.  This is a stateless endpoint that analyzes the current graph and returns suggestions without persisting any state. Users can then use the suggestions with the existing merge_nodes endpoint to perform actual merges.  The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity based on entity names, types, and descriptions. 
         * @summary Generate node merge suggestions
         * @param {string} collectionId Collection ID
         * @param {MergeSuggestionsRequest} [mergeSuggestionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsMergeSuggestionsPost: async (collectionId: string, mergeSuggestionsRequest?: MergeSuggestionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsMergeSuggestionsPost', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/graphs/merge-suggestions`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mergeSuggestionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take action on a specific merge suggestion.  Actions: - accept: Accept the suggestion and perform the merge operation - reject: Reject the suggestion and mark it as rejected  When accepting, the system will: 1. Update suggestion status to ACCEPTED 2. Perform the actual node merge using suggested entity IDs 3. Mark related suggestions involving the same entities as EXPIRED  When rejecting, the system will: 1. Update suggestion status to REJECTED 2. No merge operation is performed  The target entity data can be optionally overridden when accepting a suggestion. 
         * @summary Accept or reject a merge suggestion
         * @param {string} collectionId Collection ID
         * @param {string} suggestionId Suggestion ID
         * @param {SuggestionActionRequest} suggestionActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost: async (collectionId: string, suggestionId: string, suggestionActionRequest: SuggestionActionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost', 'collectionId', collectionId)
            // verify required parameter 'suggestionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost', 'suggestionId', suggestionId)
            // verify required parameter 'suggestionActionRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost', 'suggestionActionRequest', suggestionActionRequest)
            const localVarPath = `/collections/{collection_id}/graphs/merge-suggestions/{suggestion_id}/action`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"suggestion_id"}}`, encodeURIComponent(String(suggestionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suggestionActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.  Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.  The operation: 1. Auto-selects target entity (highest degree) if not specified in `target_entity_data` 2. Combines descriptions using default merge strategy (concatenate) 3. Merges metadata using default behavior: entity_type from target, others concatenated/joined 4. Updates all relationships to point to the target node 5. Updates vector storage data 6. Removes the source nodes  Entity type handling: Uses target entity\'s type if it exists, otherwise uses merged result. The operation is idempotent - if source nodes don\'t exist, it returns success. 
         * @summary Merge graph nodes
         * @param {string} collectionId Collection ID
         * @param {NodeMergeRequest} nodeMergeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsNodesMergePost: async (collectionId: string, nodeMergeRequest: NodeMergeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsNodesMergePost', 'collectionId', collectionId)
            // verify required parameter 'nodeMergeRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdGraphsNodesMergePost', 'nodeMergeRequest', nodeMergeRequest)
            const localVarPath = `/collections/{collection_id}/graphs/nodes/merge`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeMergeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraphApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve knowledge graph data. Two modes are supported: 1. Overview mode (default): Uses the entire graph (\"*\") and intelligently selects the most important nodes 2. Subgraph mode: When \'label\' is provided, returns a subgraph centered on that node  Node selection prioritization: 1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes 2. For subgraph: nodes within specified hops from the starting node  The overview mode is optimized for visualization performance by prioritizing well-connected nodes. 
         * @summary Get knowledge graph
         * @param {string} collectionId Collection ID
         * @param {string} [label] Label of the starting node for subgraph exploration. Use \&quot;*\&quot; (default) for overview mode showing the most important nodes in the entire graph. Provide a specific entity name for subgraph mode. 
         * @param {number} [maxNodes] Maximum number of nodes to return
         * @param {number} [maxDepth] Maximum depth when in subgraph mode (when specific label is provided). Ignored in overview mode (when label is \&quot;*\&quot;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGraphsGet(collectionId: string, label?: string, maxNodes?: number, maxDepth?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgeGraph>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGraphsGet(collectionId, label, maxNodes, maxDepth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphApi.collectionsCollectionIdGraphsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all available node labels in the collection\'s knowledge graph
         * @summary Get knowledge graph labels
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGraphsLabelsGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGraphsLabelsGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphApi.collectionsCollectionIdGraphsLabelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity. Returns confidence-ranked merge suggestions for user review and decision.  This is a stateless endpoint that analyzes the current graph and returns suggestions without persisting any state. Users can then use the suggestions with the existing merge_nodes endpoint to perform actual merges.  The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity based on entity names, types, and descriptions. 
         * @summary Generate node merge suggestions
         * @param {string} collectionId Collection ID
         * @param {MergeSuggestionsRequest} [mergeSuggestionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGraphsMergeSuggestionsPost(collectionId: string, mergeSuggestionsRequest?: MergeSuggestionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeSuggestionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGraphsMergeSuggestionsPost(collectionId, mergeSuggestionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphApi.collectionsCollectionIdGraphsMergeSuggestionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Take action on a specific merge suggestion.  Actions: - accept: Accept the suggestion and perform the merge operation - reject: Reject the suggestion and mark it as rejected  When accepting, the system will: 1. Update suggestion status to ACCEPTED 2. Perform the actual node merge using suggested entity IDs 3. Mark related suggestions involving the same entities as EXPIRED  When rejecting, the system will: 1. Update suggestion status to REJECTED 2. No merge operation is performed  The target entity data can be optionally overridden when accepting a suggestion. 
         * @summary Accept or reject a merge suggestion
         * @param {string} collectionId Collection ID
         * @param {string} suggestionId Suggestion ID
         * @param {SuggestionActionRequest} suggestionActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(collectionId: string, suggestionId: string, suggestionActionRequest: SuggestionActionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(collectionId, suggestionId, suggestionActionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphApi.collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.  Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.  The operation: 1. Auto-selects target entity (highest degree) if not specified in `target_entity_data` 2. Combines descriptions using default merge strategy (concatenate) 3. Merges metadata using default behavior: entity_type from target, others concatenated/joined 4. Updates all relationships to point to the target node 5. Updates vector storage data 6. Removes the source nodes  Entity type handling: Uses target entity\'s type if it exists, otherwise uses merged result. The operation is idempotent - if source nodes don\'t exist, it returns success. 
         * @summary Merge graph nodes
         * @param {string} collectionId Collection ID
         * @param {NodeMergeRequest} nodeMergeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGraphsNodesMergePost(collectionId: string, nodeMergeRequest: NodeMergeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeMergeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGraphsNodesMergePost(collectionId, nodeMergeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GraphApi.collectionsCollectionIdGraphsNodesMergePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraphApiFp(configuration)
    return {
        /**
         * Retrieve knowledge graph data. Two modes are supported: 1. Overview mode (default): Uses the entire graph (\"*\") and intelligently selects the most important nodes 2. Subgraph mode: When \'label\' is provided, returns a subgraph centered on that node  Node selection prioritization: 1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes 2. For subgraph: nodes within specified hops from the starting node  The overview mode is optimized for visualization performance by prioritizing well-connected nodes. 
         * @summary Get knowledge graph
         * @param {GraphApiCollectionsCollectionIdGraphsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<KnowledgeGraph> {
            return localVarFp.collectionsCollectionIdGraphsGet(requestParameters.collectionId, requestParameters.label, requestParameters.maxNodes, requestParameters.maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all available node labels in the collection\'s knowledge graph
         * @summary Get knowledge graph labels
         * @param {GraphApiCollectionsCollectionIdGraphsLabelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsLabelsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsLabelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphLabelsResponse> {
            return localVarFp.collectionsCollectionIdGraphsLabelsGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity. Returns confidence-ranked merge suggestions for user review and decision.  This is a stateless endpoint that analyzes the current graph and returns suggestions without persisting any state. Users can then use the suggestions with the existing merge_nodes endpoint to perform actual merges.  The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity based on entity names, types, and descriptions. 
         * @summary Generate node merge suggestions
         * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsMergeSuggestionsPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MergeSuggestionsResponse> {
            return localVarFp.collectionsCollectionIdGraphsMergeSuggestionsPost(requestParameters.collectionId, requestParameters.mergeSuggestionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Take action on a specific merge suggestion.  Actions: - accept: Accept the suggestion and perform the merge operation - reject: Reject the suggestion and mark it as rejected  When accepting, the system will: 1. Update suggestion status to ACCEPTED 2. Perform the actual node merge using suggested entity IDs 3. Mark related suggestions involving the same entities as EXPIRED  When rejecting, the system will: 1. Update suggestion status to REJECTED 2. No merge operation is performed  The target entity data can be optionally overridden when accepting a suggestion. 
         * @summary Accept or reject a merge suggestion
         * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuggestionActionResponse> {
            return localVarFp.collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(requestParameters.collectionId, requestParameters.suggestionId, requestParameters.suggestionActionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.  Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.  The operation: 1. Auto-selects target entity (highest degree) if not specified in `target_entity_data` 2. Combines descriptions using default merge strategy (concatenate) 3. Merges metadata using default behavior: entity_type from target, others concatenated/joined 4. Updates all relationships to point to the target node 5. Updates vector storage data 6. Removes the source nodes  Entity type handling: Uses target entity\'s type if it exists, otherwise uses merged result. The operation is idempotent - if source nodes don\'t exist, it returns success. 
         * @summary Merge graph nodes
         * @param {GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGraphsNodesMergePost(requestParameters: GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<NodeMergeResponse> {
            return localVarFp.collectionsCollectionIdGraphsNodesMergePost(requestParameters.collectionId, requestParameters.nodeMergeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GraphApi - interface
 * @export
 * @interface GraphApi
 */
export interface GraphApiInterface {
    /**
     * Retrieve knowledge graph data. Two modes are supported: 1. Overview mode (default): Uses the entire graph (\"*\") and intelligently selects the most important nodes 2. Subgraph mode: When \'label\' is provided, returns a subgraph centered on that node  Node selection prioritization: 1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes 2. For subgraph: nodes within specified hops from the starting node  The overview mode is optimized for visualization performance by prioritizing well-connected nodes. 
     * @summary Get knowledge graph
     * @param {GraphApiCollectionsCollectionIdGraphsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApiInterface
     */
    collectionsCollectionIdGraphsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<KnowledgeGraph>;

    /**
     * Get all available node labels in the collection\'s knowledge graph
     * @summary Get knowledge graph labels
     * @param {GraphApiCollectionsCollectionIdGraphsLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApiInterface
     */
    collectionsCollectionIdGraphsLabelsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsLabelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphLabelsResponse>;

    /**
     * Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity. Returns confidence-ranked merge suggestions for user review and decision.  This is a stateless endpoint that analyzes the current graph and returns suggestions without persisting any state. Users can then use the suggestions with the existing merge_nodes endpoint to perform actual merges.  The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity based on entity names, types, and descriptions. 
     * @summary Generate node merge suggestions
     * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApiInterface
     */
    collectionsCollectionIdGraphsMergeSuggestionsPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MergeSuggestionsResponse>;

    /**
     * Take action on a specific merge suggestion.  Actions: - accept: Accept the suggestion and perform the merge operation - reject: Reject the suggestion and mark it as rejected  When accepting, the system will: 1. Update suggestion status to ACCEPTED 2. Perform the actual node merge using suggested entity IDs 3. Mark related suggestions involving the same entities as EXPIRED  When rejecting, the system will: 1. Update suggestion status to REJECTED 2. No merge operation is performed  The target entity data can be optionally overridden when accepting a suggestion. 
     * @summary Accept or reject a merge suggestion
     * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApiInterface
     */
    collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuggestionActionResponse>;

    /**
     * Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.  Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.  The operation: 1. Auto-selects target entity (highest degree) if not specified in `target_entity_data` 2. Combines descriptions using default merge strategy (concatenate) 3. Merges metadata using default behavior: entity_type from target, others concatenated/joined 4. Updates all relationships to point to the target node 5. Updates vector storage data 6. Removes the source nodes  Entity type handling: Uses target entity\'s type if it exists, otherwise uses merged result. The operation is idempotent - if source nodes don\'t exist, it returns success. 
     * @summary Merge graph nodes
     * @param {GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApiInterface
     */
    collectionsCollectionIdGraphsNodesMergePost(requestParameters: GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<NodeMergeResponse>;

}

/**
 * Request parameters for collectionsCollectionIdGraphsGet operation in GraphApi.
 * @export
 * @interface GraphApiCollectionsCollectionIdGraphsGetRequest
 */
export interface GraphApiCollectionsCollectionIdGraphsGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsGet
     */
    readonly collectionId: string

    /**
     * Label of the starting node for subgraph exploration. Use \&quot;*\&quot; (default) for overview mode showing the most important nodes in the entire graph. Provide a specific entity name for subgraph mode. 
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsGet
     */
    readonly label?: string

    /**
     * Maximum number of nodes to return
     * @type {number}
     * @memberof GraphApiCollectionsCollectionIdGraphsGet
     */
    readonly maxNodes?: number

    /**
     * Maximum depth when in subgraph mode (when specific label is provided). Ignored in overview mode (when label is \&quot;*\&quot;). 
     * @type {number}
     * @memberof GraphApiCollectionsCollectionIdGraphsGet
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for collectionsCollectionIdGraphsLabelsGet operation in GraphApi.
 * @export
 * @interface GraphApiCollectionsCollectionIdGraphsLabelsGetRequest
 */
export interface GraphApiCollectionsCollectionIdGraphsLabelsGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsLabelsGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdGraphsMergeSuggestionsPost operation in GraphApi.
 * @export
 * @interface GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest
 */
export interface GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {MergeSuggestionsRequest}
     * @memberof GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPost
     */
    readonly mergeSuggestionsRequest?: MergeSuggestionsRequest
}

/**
 * Request parameters for collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost operation in GraphApi.
 * @export
 * @interface GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest
 */
export interface GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost
     */
    readonly collectionId: string

    /**
     * Suggestion ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost
     */
    readonly suggestionId: string

    /**
     * 
     * @type {SuggestionActionRequest}
     * @memberof GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost
     */
    readonly suggestionActionRequest: SuggestionActionRequest
}

/**
 * Request parameters for collectionsCollectionIdGraphsNodesMergePost operation in GraphApi.
 * @export
 * @interface GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest
 */
export interface GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof GraphApiCollectionsCollectionIdGraphsNodesMergePost
     */
    readonly collectionId: string

    /**
     * 
     * @type {NodeMergeRequest}
     * @memberof GraphApiCollectionsCollectionIdGraphsNodesMergePost
     */
    readonly nodeMergeRequest: NodeMergeRequest
}

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI implements GraphApiInterface {
    /**
     * Retrieve knowledge graph data. Two modes are supported: 1. Overview mode (default): Uses the entire graph (\"*\") and intelligently selects the most important nodes 2. Subgraph mode: When \'label\' is provided, returns a subgraph centered on that node  Node selection prioritization: 1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes 2. For subgraph: nodes within specified hops from the starting node  The overview mode is optimized for visualization performance by prioritizing well-connected nodes. 
     * @summary Get knowledge graph
     * @param {GraphApiCollectionsCollectionIdGraphsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public collectionsCollectionIdGraphsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsGetRequest, options?: RawAxiosRequestConfig) {
        return GraphApiFp(this.configuration).collectionsCollectionIdGraphsGet(requestParameters.collectionId, requestParameters.label, requestParameters.maxNodes, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all available node labels in the collection\'s knowledge graph
     * @summary Get knowledge graph labels
     * @param {GraphApiCollectionsCollectionIdGraphsLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public collectionsCollectionIdGraphsLabelsGet(requestParameters: GraphApiCollectionsCollectionIdGraphsLabelsGetRequest, options?: RawAxiosRequestConfig) {
        return GraphApiFp(this.configuration).collectionsCollectionIdGraphsLabelsGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity. Returns confidence-ranked merge suggestions for user review and decision.  This is a stateless endpoint that analyzes the current graph and returns suggestions without persisting any state. Users can then use the suggestions with the existing merge_nodes endpoint to perform actual merges.  The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity based on entity names, types, and descriptions. 
     * @summary Generate node merge suggestions
     * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public collectionsCollectionIdGraphsMergeSuggestionsPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsPostRequest, options?: RawAxiosRequestConfig) {
        return GraphApiFp(this.configuration).collectionsCollectionIdGraphsMergeSuggestionsPost(requestParameters.collectionId, requestParameters.mergeSuggestionsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Take action on a specific merge suggestion.  Actions: - accept: Accept the suggestion and perform the merge operation - reject: Reject the suggestion and mark it as rejected  When accepting, the system will: 1. Update suggestion status to ACCEPTED 2. Perform the actual node merge using suggested entity IDs 3. Mark related suggestions involving the same entities as EXPIRED  When rejecting, the system will: 1. Update suggestion status to REJECTED 2. No merge operation is performed  The target entity data can be optionally overridden when accepting a suggestion. 
     * @summary Accept or reject a merge suggestion
     * @param {GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(requestParameters: GraphApiCollectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPostRequest, options?: RawAxiosRequestConfig) {
        return GraphApiFp(this.configuration).collectionsCollectionIdGraphsMergeSuggestionsSuggestionIdActionPost(requestParameters.collectionId, requestParameters.suggestionId, requestParameters.suggestionActionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.  Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.  The operation: 1. Auto-selects target entity (highest degree) if not specified in `target_entity_data` 2. Combines descriptions using default merge strategy (concatenate) 3. Merges metadata using default behavior: entity_type from target, others concatenated/joined 4. Updates all relationships to point to the target node 5. Updates vector storage data 6. Removes the source nodes  Entity type handling: Uses target entity\'s type if it exists, otherwise uses merged result. The operation is idempotent - if source nodes don\'t exist, it returns success. 
     * @summary Merge graph nodes
     * @param {GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public collectionsCollectionIdGraphsNodesMergePost(requestParameters: GraphApiCollectionsCollectionIdGraphsNodesMergePostRequest, options?: RawAxiosRequestConfig) {
        return GraphApiFp(this.configuration).collectionsCollectionIdGraphsNodesMergePost(requestParameters.collectionId, requestParameters.nodeMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

