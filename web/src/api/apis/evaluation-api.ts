/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Evaluation } from '../models';
// @ts-ignore
import type { EvaluationChatWithAgentRequest } from '../models';
// @ts-ignore
import type { EvaluationChatWithAgentResponse } from '../models';
// @ts-ignore
import type { EvaluationCreate } from '../models';
// @ts-ignore
import type { EvaluationDetail } from '../models';
// @ts-ignore
import type { EvaluationList } from '../models';
// @ts-ignore
import type { Question } from '../models';
// @ts-ignore
import type { QuestionSet } from '../models';
// @ts-ignore
import type { QuestionSetCreate } from '../models';
// @ts-ignore
import type { QuestionSetDetail } from '../models';
// @ts-ignore
import type { QuestionSetGenerate } from '../models';
// @ts-ignore
import type { QuestionSetList } from '../models';
// @ts-ignore
import type { QuestionSetUpdate } from '../models';
// @ts-ignore
import type { QuestionUpdate } from '../models';
// @ts-ignore
import type { QuestionsAdd } from '../models';
/**
 * EvaluationApi - axios parameter creator
 * @export
 */
export const EvaluationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add questions to a question set
         * @param {string} qsId 
         * @param {QuestionsAdd} [questionsAdd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestionsApiV1QuestionSetsQsIdQuestionsPost: async (qsId: string, questionsAdd?: QuestionsAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('addQuestionsApiV1QuestionSetsQsIdQuestionsPost', 'qsId', qsId)
            const localVarPath = `/question-sets/{qs_id}/questions`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionsAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery\'s execution context. It should be protected by an internal API key. 
         * @summary (Internal) Chat with an agent for evaluation purposes
         * @param {EvaluationChatWithAgentRequest} [evaluationChatWithAgentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost: async (evaluationChatWithAgentRequest?: EvaluationChatWithAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluations/chat_with_agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluationChatWithAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create and start a new evaluation task
         * @param {EvaluationCreate} [evaluationCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvaluationApiV1EvaluationsPost: async (evaluationCreate?: EvaluationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new question set
         * @param {QuestionSetCreate} [questionSetCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionSetApiV1QuestionSetsPost: async (questionSetCreate?: QuestionSetCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/question-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionSetCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationApiV1EvaluationsEvalIdDelete: async (evalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            assertParamExists('deleteEvaluationApiV1EvaluationsEvalIdDelete', 'evalId', evalId)
            const localVarPath = `/evaluations/{eval_id}`
                .replace(`{${"eval_id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a question
         * @param {string} qsId 
         * @param {string} qId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete: async (qsId: string, qId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete', 'qsId', qsId)
            // verify required parameter 'qId' is not null or undefined
            assertParamExists('deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete', 'qId', qId)
            const localVarPath = `/question-sets/{qs_id}/questions/{q_id}`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)))
                .replace(`{${"q_id"}}`, encodeURIComponent(String(qId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a question set
         * @param {string} qsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionSetApiV1QuestionSetsQsIdDelete: async (qsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('deleteQuestionSetApiV1QuestionSetsQsIdDelete', 'qsId', qsId)
            const localVarPath = `/question-sets/{qs_id}`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a question set from a collection
         * @param {QuestionSetGenerate} [questionSetGenerate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuestionSetApiV1QuestionSetsGeneratePost: async (questionSetGenerate?: QuestionSetGenerate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/question-sets/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionSetGenerate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationApiV1EvaluationsEvalIdGet: async (evalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            assertParamExists('getEvaluationApiV1EvaluationsEvalIdGet', 'evalId', evalId)
            const localVarPath = `/evaluations/{eval_id}`
                .replace(`{${"eval_id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of a question set
         * @param {string} qsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionSetApiV1QuestionSetsQsIdGet: async (qsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('getQuestionSetApiV1QuestionSetsQsIdGet', 'qsId', qsId)
            const localVarPath = `/question-sets/{qs_id}`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all evaluation tasks
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvaluationsApiV1EvaluationsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all question sets for the current user
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuestionSetsApiV1QuestionSetsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/question-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pause an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseEvaluationApiV1EvaluationsEvalIdPausePost: async (evalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            assertParamExists('pauseEvaluationApiV1EvaluationsEvalIdPausePost', 'evalId', evalId)
            const localVarPath = `/evaluations/{eval_id}/pause`
                .replace(`{${"eval_id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeEvaluationApiV1EvaluationsEvalIdResumePost: async (evalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            assertParamExists('resumeEvaluationApiV1EvaluationsEvalIdResumePost', 'evalId', evalId)
            const localVarPath = `/evaluations/{eval_id}/resume`
                .replace(`{${"eval_id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retry failed items in an evaluation task
         * @param {string} evalId 
         * @param {RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryEvaluationApiV1EvaluationsEvalIdRetryPost: async (evalId: string, scope?: RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            assertParamExists('retryEvaluationApiV1EvaluationsEvalIdRetryPost', 'evalId', evalId)
            const localVarPath = `/evaluations/{eval_id}/retry`
                .replace(`{${"eval_id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a question
         * @param {string} qsId 
         * @param {string} qId 
         * @param {QuestionUpdate} [questionUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut: async (qsId: string, qId: string, questionUpdate?: QuestionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut', 'qsId', qsId)
            // verify required parameter 'qId' is not null or undefined
            assertParamExists('updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut', 'qId', qId)
            const localVarPath = `/question-sets/{qs_id}/questions/{q_id}`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)))
                .replace(`{${"q_id"}}`, encodeURIComponent(String(qId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a question set
         * @param {string} qsId 
         * @param {QuestionSetUpdate} [questionSetUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionSetApiV1QuestionSetsQsIdPut: async (qsId: string, questionSetUpdate?: QuestionSetUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qsId' is not null or undefined
            assertParamExists('updateQuestionSetApiV1QuestionSetsQsIdPut', 'qsId', qsId)
            const localVarPath = `/question-sets/{qs_id}`
                .replace(`{${"qs_id"}}`, encodeURIComponent(String(qsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionSetUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationApi - functional programming interface
 * @export
 */
export const EvaluationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EvaluationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add questions to a question set
         * @param {string} qsId 
         * @param {QuestionsAdd} [questionsAdd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQuestionsApiV1QuestionSetsQsIdQuestionsPost(qsId: string, questionsAdd?: QuestionsAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Question>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQuestionsApiV1QuestionSetsQsIdQuestionsPost(qsId, questionsAdd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.addQuestionsApiV1QuestionSetsQsIdQuestionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery\'s execution context. It should be protected by an internal API key. 
         * @summary (Internal) Chat with an agent for evaluation purposes
         * @param {EvaluationChatWithAgentRequest} [evaluationChatWithAgentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(evaluationChatWithAgentRequest?: EvaluationChatWithAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationChatWithAgentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(evaluationChatWithAgentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create and start a new evaluation task
         * @param {EvaluationCreate} [evaluationCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvaluationApiV1EvaluationsPost(evaluationCreate?: EvaluationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvaluationApiV1EvaluationsPost(evaluationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.createEvaluationApiV1EvaluationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new question set
         * @param {QuestionSetCreate} [questionSetCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionSetApiV1QuestionSetsPost(questionSetCreate?: QuestionSetCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionSetApiV1QuestionSetsPost(questionSetCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.createQuestionSetApiV1QuestionSetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvaluationApiV1EvaluationsEvalIdDelete(evalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvaluationApiV1EvaluationsEvalIdDelete(evalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.deleteEvaluationApiV1EvaluationsEvalIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a question
         * @param {string} qsId 
         * @param {string} qId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(qsId: string, qId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(qsId, qId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a question set
         * @param {string} qsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestionSetApiV1QuestionSetsQsIdDelete(qsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionSetApiV1QuestionSetsQsIdDelete(qsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.deleteQuestionSetApiV1QuestionSetsQsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generate a question set from a collection
         * @param {QuestionSetGenerate} [questionSetGenerate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQuestionSetApiV1QuestionSetsGeneratePost(questionSetGenerate?: QuestionSetGenerate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSetDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQuestionSetApiV1QuestionSetsGeneratePost(questionSetGenerate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.generateQuestionSetApiV1QuestionSetsGeneratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get details of an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvaluationApiV1EvaluationsEvalIdGet(evalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvaluationApiV1EvaluationsEvalIdGet(evalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.getEvaluationApiV1EvaluationsEvalIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get details of a question set
         * @param {string} qsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionSetApiV1QuestionSetsQsIdGet(qsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSetDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionSetApiV1QuestionSetsQsIdGet(qsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.getQuestionSetApiV1QuestionSetsQsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all evaluation tasks
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvaluationsApiV1EvaluationsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvaluationsApiV1EvaluationsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.listEvaluationsApiV1EvaluationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all question sets for the current user
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listQuestionSetsApiV1QuestionSetsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSetList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listQuestionSetsApiV1QuestionSetsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.listQuestionSetsApiV1QuestionSetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pause an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseEvaluationApiV1EvaluationsEvalIdPausePost(evalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseEvaluationApiV1EvaluationsEvalIdPausePost(evalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.pauseEvaluationApiV1EvaluationsEvalIdPausePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resume an evaluation task
         * @param {string} evalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeEvaluationApiV1EvaluationsEvalIdResumePost(evalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeEvaluationApiV1EvaluationsEvalIdResumePost(evalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.resumeEvaluationApiV1EvaluationsEvalIdResumePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retry failed items in an evaluation task
         * @param {string} evalId 
         * @param {RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryEvaluationApiV1EvaluationsEvalIdRetryPost(evalId: string, scope?: RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryEvaluationApiV1EvaluationsEvalIdRetryPost(evalId, scope, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.retryEvaluationApiV1EvaluationsEvalIdRetryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a question
         * @param {string} qsId 
         * @param {string} qId 
         * @param {QuestionUpdate} [questionUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(qsId: string, qId: string, questionUpdate?: QuestionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(qsId, qId, questionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a question set
         * @param {string} qsId 
         * @param {QuestionSetUpdate} [questionSetUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionSetApiV1QuestionSetsQsIdPut(qsId: string, questionSetUpdate?: QuestionSetUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionSetApiV1QuestionSetsQsIdPut(qsId, questionSetUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvaluationApi.updateQuestionSetApiV1QuestionSetsQsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EvaluationApi - factory interface
 * @export
 */
export const EvaluationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EvaluationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add questions to a question set
         * @param {EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestionsApiV1QuestionSetsQsIdQuestionsPost(requestParameters: EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Question>> {
            return localVarFp.addQuestionsApiV1QuestionSetsQsIdQuestionsPost(requestParameters.qsId, requestParameters.questionsAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery\'s execution context. It should be protected by an internal API key. 
         * @summary (Internal) Chat with an agent for evaluation purposes
         * @param {EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(requestParameters: EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationChatWithAgentResponse> {
            return localVarFp.chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(requestParameters.evaluationChatWithAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create and start a new evaluation task
         * @param {EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvaluationApiV1EvaluationsPost(requestParameters: EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation> {
            return localVarFp.createEvaluationApiV1EvaluationsPost(requestParameters.evaluationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new question set
         * @param {EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionSetApiV1QuestionSetsPost(requestParameters: EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSet> {
            return localVarFp.createQuestionSetApiV1QuestionSetsPost(requestParameters.questionSetCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an evaluation task
         * @param {EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvaluationApiV1EvaluationsEvalIdDelete(requestParameters: EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEvaluationApiV1EvaluationsEvalIdDelete(requestParameters.evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a question
         * @param {EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(requestParameters: EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(requestParameters.qsId, requestParameters.qId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a question set
         * @param {EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionSetApiV1QuestionSetsQsIdDelete(requestParameters: EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuestionSetApiV1QuestionSetsQsIdDelete(requestParameters.qsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a question set from a collection
         * @param {EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuestionSetApiV1QuestionSetsGeneratePost(requestParameters: EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetDetail> {
            return localVarFp.generateQuestionSetApiV1QuestionSetsGeneratePost(requestParameters.questionSetGenerate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of an evaluation task
         * @param {EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluationApiV1EvaluationsEvalIdGet(requestParameters: EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationDetail> {
            return localVarFp.getEvaluationApiV1EvaluationsEvalIdGet(requestParameters.evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of a question set
         * @param {EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionSetApiV1QuestionSetsQsIdGet(requestParameters: EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetDetail> {
            return localVarFp.getQuestionSetApiV1QuestionSetsQsIdGet(requestParameters.qsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all evaluation tasks
         * @param {EvaluationApiListEvaluationsApiV1EvaluationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvaluationsApiV1EvaluationsGet(requestParameters: EvaluationApiListEvaluationsApiV1EvaluationsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationList> {
            return localVarFp.listEvaluationsApiV1EvaluationsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all question sets for the current user
         * @param {EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuestionSetsApiV1QuestionSetsGet(requestParameters: EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetList> {
            return localVarFp.listQuestionSetsApiV1QuestionSetsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pause an evaluation task
         * @param {EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseEvaluationApiV1EvaluationsEvalIdPausePost(requestParameters: EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation> {
            return localVarFp.pauseEvaluationApiV1EvaluationsEvalIdPausePost(requestParameters.evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume an evaluation task
         * @param {EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeEvaluationApiV1EvaluationsEvalIdResumePost(requestParameters: EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation> {
            return localVarFp.resumeEvaluationApiV1EvaluationsEvalIdResumePost(requestParameters.evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retry failed items in an evaluation task
         * @param {EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryEvaluationApiV1EvaluationsEvalIdRetryPost(requestParameters: EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation> {
            return localVarFp.retryEvaluationApiV1EvaluationsEvalIdRetryPost(requestParameters.evalId, requestParameters.scope, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a question
         * @param {EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(requestParameters: EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(requestParameters.qsId, requestParameters.qId, requestParameters.questionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a question set
         * @param {EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionSetApiV1QuestionSetsQsIdPut(requestParameters: EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSet> {
            return localVarFp.updateQuestionSetApiV1QuestionSetsQsIdPut(requestParameters.qsId, requestParameters.questionSetUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EvaluationApi - interface
 * @export
 * @interface EvaluationApi
 */
export interface EvaluationApiInterface {
    /**
     * 
     * @summary Add questions to a question set
     * @param {EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    addQuestionsApiV1QuestionSetsQsIdQuestionsPost(requestParameters: EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Question>>;

    /**
     * This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery\'s execution context. It should be protected by an internal API key. 
     * @summary (Internal) Chat with an agent for evaluation purposes
     * @param {EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(requestParameters?: EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationChatWithAgentResponse>;

    /**
     * 
     * @summary Create and start a new evaluation task
     * @param {EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    createEvaluationApiV1EvaluationsPost(requestParameters?: EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation>;

    /**
     * 
     * @summary Create a new question set
     * @param {EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    createQuestionSetApiV1QuestionSetsPost(requestParameters?: EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSet>;

    /**
     * 
     * @summary Delete an evaluation task
     * @param {EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    deleteEvaluationApiV1EvaluationsEvalIdDelete(requestParameters: EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete a question
     * @param {EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(requestParameters: EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete a question set
     * @param {EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    deleteQuestionSetApiV1QuestionSetsQsIdDelete(requestParameters: EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Generate a question set from a collection
     * @param {EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    generateQuestionSetApiV1QuestionSetsGeneratePost(requestParameters?: EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetDetail>;

    /**
     * 
     * @summary Get details of an evaluation task
     * @param {EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    getEvaluationApiV1EvaluationsEvalIdGet(requestParameters: EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationDetail>;

    /**
     * 
     * @summary Get details of a question set
     * @param {EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    getQuestionSetApiV1QuestionSetsQsIdGet(requestParameters: EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetDetail>;

    /**
     * 
     * @summary List all evaluation tasks
     * @param {EvaluationApiListEvaluationsApiV1EvaluationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    listEvaluationsApiV1EvaluationsGet(requestParameters?: EvaluationApiListEvaluationsApiV1EvaluationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EvaluationList>;

    /**
     * 
     * @summary List all question sets for the current user
     * @param {EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    listQuestionSetsApiV1QuestionSetsGet(requestParameters?: EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSetList>;

    /**
     * 
     * @summary Pause an evaluation task
     * @param {EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    pauseEvaluationApiV1EvaluationsEvalIdPausePost(requestParameters: EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation>;

    /**
     * 
     * @summary Resume an evaluation task
     * @param {EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    resumeEvaluationApiV1EvaluationsEvalIdResumePost(requestParameters: EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation>;

    /**
     * 
     * @summary Retry failed items in an evaluation task
     * @param {EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    retryEvaluationApiV1EvaluationsEvalIdRetryPost(requestParameters: EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Evaluation>;

    /**
     * 
     * @summary Update a question
     * @param {EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(requestParameters: EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Question>;

    /**
     * 
     * @summary Update a question set
     * @param {EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApiInterface
     */
    updateQuestionSetApiV1QuestionSetsQsIdPut(requestParameters: EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuestionSet>;

}

/**
 * Request parameters for addQuestionsApiV1QuestionSetsQsIdQuestionsPost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest
 */
export interface EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPost
     */
    readonly qsId: string

    /**
     * 
     * @type {QuestionsAdd}
     * @memberof EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPost
     */
    readonly questionsAdd?: QuestionsAdd
}

/**
 * Request parameters for chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest
 */
export interface EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest {
    /**
     * 
     * @type {EvaluationChatWithAgentRequest}
     * @memberof EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost
     */
    readonly evaluationChatWithAgentRequest?: EvaluationChatWithAgentRequest
}

/**
 * Request parameters for createEvaluationApiV1EvaluationsPost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest
 */
export interface EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest {
    /**
     * 
     * @type {EvaluationCreate}
     * @memberof EvaluationApiCreateEvaluationApiV1EvaluationsPost
     */
    readonly evaluationCreate?: EvaluationCreate
}

/**
 * Request parameters for createQuestionSetApiV1QuestionSetsPost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest
 */
export interface EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest {
    /**
     * 
     * @type {QuestionSetCreate}
     * @memberof EvaluationApiCreateQuestionSetApiV1QuestionSetsPost
     */
    readonly questionSetCreate?: QuestionSetCreate
}

/**
 * Request parameters for deleteEvaluationApiV1EvaluationsEvalIdDelete operation in EvaluationApi.
 * @export
 * @interface EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest
 */
export interface EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDelete
     */
    readonly evalId: string
}

/**
 * Request parameters for deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete operation in EvaluationApi.
 * @export
 * @interface EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest
 */
export interface EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete
     */
    readonly qsId: string

    /**
     * 
     * @type {string}
     * @memberof EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete
     */
    readonly qId: string
}

/**
 * Request parameters for deleteQuestionSetApiV1QuestionSetsQsIdDelete operation in EvaluationApi.
 * @export
 * @interface EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest
 */
export interface EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDelete
     */
    readonly qsId: string
}

/**
 * Request parameters for generateQuestionSetApiV1QuestionSetsGeneratePost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest
 */
export interface EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest {
    /**
     * 
     * @type {QuestionSetGenerate}
     * @memberof EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePost
     */
    readonly questionSetGenerate?: QuestionSetGenerate
}

/**
 * Request parameters for getEvaluationApiV1EvaluationsEvalIdGet operation in EvaluationApi.
 * @export
 * @interface EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest
 */
export interface EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGet
     */
    readonly evalId: string
}

/**
 * Request parameters for getQuestionSetApiV1QuestionSetsQsIdGet operation in EvaluationApi.
 * @export
 * @interface EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest
 */
export interface EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGet
     */
    readonly qsId: string
}

/**
 * Request parameters for listEvaluationsApiV1EvaluationsGet operation in EvaluationApi.
 * @export
 * @interface EvaluationApiListEvaluationsApiV1EvaluationsGetRequest
 */
export interface EvaluationApiListEvaluationsApiV1EvaluationsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof EvaluationApiListEvaluationsApiV1EvaluationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof EvaluationApiListEvaluationsApiV1EvaluationsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for listQuestionSetsApiV1QuestionSetsGet operation in EvaluationApi.
 * @export
 * @interface EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest
 */
export interface EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof EvaluationApiListQuestionSetsApiV1QuestionSetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof EvaluationApiListQuestionSetsApiV1QuestionSetsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for pauseEvaluationApiV1EvaluationsEvalIdPausePost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest
 */
export interface EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePost
     */
    readonly evalId: string
}

/**
 * Request parameters for resumeEvaluationApiV1EvaluationsEvalIdResumePost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest
 */
export interface EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePost
     */
    readonly evalId: string
}

/**
 * Request parameters for retryEvaluationApiV1EvaluationsEvalIdRetryPost operation in EvaluationApi.
 * @export
 * @interface EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest
 */
export interface EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPost
     */
    readonly evalId: string

    /**
     * 
     * @type {'failed' | 'all'}
     * @memberof EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPost
     */
    readonly scope?: RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum
}

/**
 * Request parameters for updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut operation in EvaluationApi.
 * @export
 * @interface EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest
 */
export interface EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut
     */
    readonly qsId: string

    /**
     * 
     * @type {string}
     * @memberof EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut
     */
    readonly qId: string

    /**
     * 
     * @type {QuestionUpdate}
     * @memberof EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut
     */
    readonly questionUpdate?: QuestionUpdate
}

/**
 * Request parameters for updateQuestionSetApiV1QuestionSetsQsIdPut operation in EvaluationApi.
 * @export
 * @interface EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest
 */
export interface EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPut
     */
    readonly qsId: string

    /**
     * 
     * @type {QuestionSetUpdate}
     * @memberof EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPut
     */
    readonly questionSetUpdate?: QuestionSetUpdate
}

/**
 * EvaluationApi - object-oriented interface
 * @export
 * @class EvaluationApi
 * @extends {BaseAPI}
 */
export class EvaluationApi extends BaseAPI implements EvaluationApiInterface {
    /**
     * 
     * @summary Add questions to a question set
     * @param {EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public addQuestionsApiV1QuestionSetsQsIdQuestionsPost(requestParameters: EvaluationApiAddQuestionsApiV1QuestionSetsQsIdQuestionsPostRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).addQuestionsApiV1QuestionSetsQsIdQuestionsPost(requestParameters.qsId, requestParameters.questionsAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery\'s execution context. It should be protected by an internal API key. 
     * @summary (Internal) Chat with an agent for evaluation purposes
     * @param {EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(requestParameters: EvaluationApiChatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).chatWithAgentForEvaluationApiV1EvaluationsChatWithAgentPost(requestParameters.evaluationChatWithAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create and start a new evaluation task
     * @param {EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public createEvaluationApiV1EvaluationsPost(requestParameters: EvaluationApiCreateEvaluationApiV1EvaluationsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).createEvaluationApiV1EvaluationsPost(requestParameters.evaluationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new question set
     * @param {EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public createQuestionSetApiV1QuestionSetsPost(requestParameters: EvaluationApiCreateQuestionSetApiV1QuestionSetsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).createQuestionSetApiV1QuestionSetsPost(requestParameters.questionSetCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an evaluation task
     * @param {EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public deleteEvaluationApiV1EvaluationsEvalIdDelete(requestParameters: EvaluationApiDeleteEvaluationApiV1EvaluationsEvalIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).deleteEvaluationApiV1EvaluationsEvalIdDelete(requestParameters.evalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a question
     * @param {EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(requestParameters: EvaluationApiDeleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).deleteQuestionApiV1QuestionSetsQsIdQuestionsQIdDelete(requestParameters.qsId, requestParameters.qId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a question set
     * @param {EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public deleteQuestionSetApiV1QuestionSetsQsIdDelete(requestParameters: EvaluationApiDeleteQuestionSetApiV1QuestionSetsQsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).deleteQuestionSetApiV1QuestionSetsQsIdDelete(requestParameters.qsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a question set from a collection
     * @param {EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public generateQuestionSetApiV1QuestionSetsGeneratePost(requestParameters: EvaluationApiGenerateQuestionSetApiV1QuestionSetsGeneratePostRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).generateQuestionSetApiV1QuestionSetsGeneratePost(requestParameters.questionSetGenerate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of an evaluation task
     * @param {EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getEvaluationApiV1EvaluationsEvalIdGet(requestParameters: EvaluationApiGetEvaluationApiV1EvaluationsEvalIdGetRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getEvaluationApiV1EvaluationsEvalIdGet(requestParameters.evalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of a question set
     * @param {EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getQuestionSetApiV1QuestionSetsQsIdGet(requestParameters: EvaluationApiGetQuestionSetApiV1QuestionSetsQsIdGetRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getQuestionSetApiV1QuestionSetsQsIdGet(requestParameters.qsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all evaluation tasks
     * @param {EvaluationApiListEvaluationsApiV1EvaluationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public listEvaluationsApiV1EvaluationsGet(requestParameters: EvaluationApiListEvaluationsApiV1EvaluationsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).listEvaluationsApiV1EvaluationsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all question sets for the current user
     * @param {EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public listQuestionSetsApiV1QuestionSetsGet(requestParameters: EvaluationApiListQuestionSetsApiV1QuestionSetsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).listQuestionSetsApiV1QuestionSetsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pause an evaluation task
     * @param {EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public pauseEvaluationApiV1EvaluationsEvalIdPausePost(requestParameters: EvaluationApiPauseEvaluationApiV1EvaluationsEvalIdPausePostRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).pauseEvaluationApiV1EvaluationsEvalIdPausePost(requestParameters.evalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resume an evaluation task
     * @param {EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public resumeEvaluationApiV1EvaluationsEvalIdResumePost(requestParameters: EvaluationApiResumeEvaluationApiV1EvaluationsEvalIdResumePostRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).resumeEvaluationApiV1EvaluationsEvalIdResumePost(requestParameters.evalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retry failed items in an evaluation task
     * @param {EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public retryEvaluationApiV1EvaluationsEvalIdRetryPost(requestParameters: EvaluationApiRetryEvaluationApiV1EvaluationsEvalIdRetryPostRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).retryEvaluationApiV1EvaluationsEvalIdRetryPost(requestParameters.evalId, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a question
     * @param {EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(requestParameters: EvaluationApiUpdateQuestionApiV1QuestionSetsQsIdQuestionsQIdPutRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).updateQuestionApiV1QuestionSetsQsIdQuestionsQIdPut(requestParameters.qsId, requestParameters.qId, requestParameters.questionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a question set
     * @param {EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public updateQuestionSetApiV1QuestionSetsQsIdPut(requestParameters: EvaluationApiUpdateQuestionSetApiV1QuestionSetsQsIdPutRequest, options?: RawAxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).updateQuestionSetApiV1QuestionSetsQsIdPut(requestParameters.qsId, requestParameters.questionSetUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum = {
    failed: 'failed',
    all: 'all'
} as const;
export type RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum = typeof RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum[keyof typeof RetryEvaluationApiV1EvaluationsEvalIdRetryPostScopeEnum];
