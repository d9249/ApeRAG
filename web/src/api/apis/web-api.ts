/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { WebReadRequest } from '../models';
// @ts-ignore
import type { WebReadResponse } from '../models';
// @ts-ignore
import type { WebSearchRequest } from '../models';
// @ts-ignore
import type { WebSearchResponse } from '../models';
/**
 * WebApi - axios parameter creator
 * @export
 */
export const WebApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Read and extract content from web pages
         * @summary Web content reading
         * @param {WebReadRequest} webReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webReadPost: async (webReadRequest: WebReadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webReadRequest' is not null or undefined
            assertParamExists('webReadPost', 'webReadRequest', webReadRequest)
            const localVarPath = `/web/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webReadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform web search using various search engines
         * @summary Web search
         * @param {WebSearchRequest} webSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSearchPost: async (webSearchRequest: WebSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webSearchRequest' is not null or undefined
            assertParamExists('webSearchPost', 'webSearchRequest', webSearchRequest)
            const localVarPath = `/web/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebApi - functional programming interface
 * @export
 */
export const WebApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebApiAxiosParamCreator(configuration)
    return {
        /**
         * Read and extract content from web pages
         * @summary Web content reading
         * @param {WebReadRequest} webReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webReadPost(webReadRequest: WebReadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webReadPost(webReadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebApi.webReadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Perform web search using various search engines
         * @summary Web search
         * @param {WebSearchRequest} webSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webSearchPost(webSearchRequest: WebSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webSearchPost(webSearchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebApi.webSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebApi - factory interface
 * @export
 */
export const WebApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebApiFp(configuration)
    return {
        /**
         * Read and extract content from web pages
         * @summary Web content reading
         * @param {WebApiWebReadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webReadPost(requestParameters: WebApiWebReadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebReadResponse> {
            return localVarFp.webReadPost(requestParameters.webReadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform web search using various search engines
         * @summary Web search
         * @param {WebApiWebSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSearchPost(requestParameters: WebApiWebSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebSearchResponse> {
            return localVarFp.webSearchPost(requestParameters.webSearchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebApi - interface
 * @export
 * @interface WebApi
 */
export interface WebApiInterface {
    /**
     * Read and extract content from web pages
     * @summary Web content reading
     * @param {WebApiWebReadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebApiInterface
     */
    webReadPost(requestParameters: WebApiWebReadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebReadResponse>;

    /**
     * Perform web search using various search engines
     * @summary Web search
     * @param {WebApiWebSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebApiInterface
     */
    webSearchPost(requestParameters: WebApiWebSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebSearchResponse>;

}

/**
 * Request parameters for webReadPost operation in WebApi.
 * @export
 * @interface WebApiWebReadPostRequest
 */
export interface WebApiWebReadPostRequest {
    /**
     * 
     * @type {WebReadRequest}
     * @memberof WebApiWebReadPost
     */
    readonly webReadRequest: WebReadRequest
}

/**
 * Request parameters for webSearchPost operation in WebApi.
 * @export
 * @interface WebApiWebSearchPostRequest
 */
export interface WebApiWebSearchPostRequest {
    /**
     * 
     * @type {WebSearchRequest}
     * @memberof WebApiWebSearchPost
     */
    readonly webSearchRequest: WebSearchRequest
}

/**
 * WebApi - object-oriented interface
 * @export
 * @class WebApi
 * @extends {BaseAPI}
 */
export class WebApi extends BaseAPI implements WebApiInterface {
    /**
     * Read and extract content from web pages
     * @summary Web content reading
     * @param {WebApiWebReadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebApi
     */
    public webReadPost(requestParameters: WebApiWebReadPostRequest, options?: RawAxiosRequestConfig) {
        return WebApiFp(this.configuration).webReadPost(requestParameters.webReadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform web search using various search engines
     * @summary Web search
     * @param {WebApiWebSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebApi
     */
    public webSearchPost(requestParameters: WebApiWebSearchPostRequest, options?: RawAxiosRequestConfig) {
        return WebApiFp(this.configuration).webSearchPost(requestParameters.webSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

