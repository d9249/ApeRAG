/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { QuotaUpdateRequest } from '../models';
// @ts-ignore
import type { QuotaUpdateResponse } from '../models';
// @ts-ignore
import type { QuotasGet200Response } from '../models';
// @ts-ignore
import type { QuotasUserIdRecalculatePost200Response } from '../models';
// @ts-ignore
import type { SystemDefaultQuotasResponse } from '../models';
// @ts-ignore
import type { SystemDefaultQuotasUpdateRequest } from '../models';
// @ts-ignore
import type { SystemDefaultQuotasUpdateResponse } from '../models';
/**
 * QuotasApi - axios parameter creator
 * @export
 */
export const QuotasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get quota information for the current user or specific user (admin only)
         * @summary Get user quotas
         * @param {string} [userId] User ID to get quotas for (admin only, defaults to current user)
         * @param {string} [search] Search term for username, email, or user ID (admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasGet: async (userId?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update quota limit for a specific user (admin only)
         * @summary Update user quota
         * @param {string} userId User ID to update quota for
         * @param {QuotaUpdateRequest} quotaUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasUserIdPut: async (userId: string, quotaUpdateRequest: QuotaUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('quotasUserIdPut', 'userId', userId)
            // verify required parameter 'quotaUpdateRequest' is not null or undefined
            assertParamExists('quotasUserIdPut', 'quotaUpdateRequest', quotaUpdateRequest)
            const localVarPath = `/quotas/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quotaUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recalculate and update current usage for all quota types for a user (admin only)
         * @summary Recalculate user quota usage
         * @param {string} userId User ID to recalculate quotas for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasUserIdRecalculatePost: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('quotasUserIdRecalculatePost', 'userId', userId)
            const localVarPath = `/quotas/{user_id}/recalculate`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system default quota configuration (admin only)
         * @summary Get system default quotas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDefaultQuotasGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system/default-quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update system default quota configuration (admin only)
         * @summary Update system default quotas
         * @param {SystemDefaultQuotasUpdateRequest} systemDefaultQuotasUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDefaultQuotasPut: async (systemDefaultQuotasUpdateRequest: SystemDefaultQuotasUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemDefaultQuotasUpdateRequest' is not null or undefined
            assertParamExists('systemDefaultQuotasPut', 'systemDefaultQuotasUpdateRequest', systemDefaultQuotasUpdateRequest)
            const localVarPath = `/system/default-quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemDefaultQuotasUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuotasApi - functional programming interface
 * @export
 */
export const QuotasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuotasApiAxiosParamCreator(configuration)
    return {
        /**
         * Get quota information for the current user or specific user (admin only)
         * @summary Get user quotas
         * @param {string} [userId] User ID to get quotas for (admin only, defaults to current user)
         * @param {string} [search] Search term for username, email, or user ID (admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotasGet(userId?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotasGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotasGet(userId, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotasApi.quotasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update quota limit for a specific user (admin only)
         * @summary Update user quota
         * @param {string} userId User ID to update quota for
         * @param {QuotaUpdateRequest} quotaUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotasUserIdPut(userId: string, quotaUpdateRequest: QuotaUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotasUserIdPut(userId, quotaUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotasApi.quotasUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Recalculate and update current usage for all quota types for a user (admin only)
         * @summary Recalculate user quota usage
         * @param {string} userId User ID to recalculate quotas for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotasUserIdRecalculatePost(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotasUserIdRecalculatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotasUserIdRecalculatePost(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotasApi.quotasUserIdRecalculatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system default quota configuration (admin only)
         * @summary Get system default quotas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemDefaultQuotasGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDefaultQuotasResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemDefaultQuotasGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotasApi.systemDefaultQuotasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update system default quota configuration (admin only)
         * @summary Update system default quotas
         * @param {SystemDefaultQuotasUpdateRequest} systemDefaultQuotasUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemDefaultQuotasPut(systemDefaultQuotasUpdateRequest: SystemDefaultQuotasUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDefaultQuotasUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemDefaultQuotasPut(systemDefaultQuotasUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuotasApi.systemDefaultQuotasPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuotasApi - factory interface
 * @export
 */
export const QuotasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuotasApiFp(configuration)
    return {
        /**
         * Get quota information for the current user or specific user (admin only)
         * @summary Get user quotas
         * @param {QuotasApiQuotasGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasGet(requestParameters: QuotasApiQuotasGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QuotasGet200Response> {
            return localVarFp.quotasGet(requestParameters.userId, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Update quota limit for a specific user (admin only)
         * @summary Update user quota
         * @param {QuotasApiQuotasUserIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasUserIdPut(requestParameters: QuotasApiQuotasUserIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotaUpdateResponse> {
            return localVarFp.quotasUserIdPut(requestParameters.userId, requestParameters.quotaUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Recalculate and update current usage for all quota types for a user (admin only)
         * @summary Recalculate user quota usage
         * @param {QuotasApiQuotasUserIdRecalculatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasUserIdRecalculatePost(requestParameters: QuotasApiQuotasUserIdRecalculatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotasUserIdRecalculatePost200Response> {
            return localVarFp.quotasUserIdRecalculatePost(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system default quota configuration (admin only)
         * @summary Get system default quotas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDefaultQuotasGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemDefaultQuotasResponse> {
            return localVarFp.systemDefaultQuotasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update system default quota configuration (admin only)
         * @summary Update system default quotas
         * @param {QuotasApiSystemDefaultQuotasPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDefaultQuotasPut(requestParameters: QuotasApiSystemDefaultQuotasPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemDefaultQuotasUpdateResponse> {
            return localVarFp.systemDefaultQuotasPut(requestParameters.systemDefaultQuotasUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuotasApi - interface
 * @export
 * @interface QuotasApi
 */
export interface QuotasApiInterface {
    /**
     * Get quota information for the current user or specific user (admin only)
     * @summary Get user quotas
     * @param {QuotasApiQuotasGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApiInterface
     */
    quotasGet(requestParameters?: QuotasApiQuotasGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotasGet200Response>;

    /**
     * Update quota limit for a specific user (admin only)
     * @summary Update user quota
     * @param {QuotasApiQuotasUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApiInterface
     */
    quotasUserIdPut(requestParameters: QuotasApiQuotasUserIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotaUpdateResponse>;

    /**
     * Recalculate and update current usage for all quota types for a user (admin only)
     * @summary Recalculate user quota usage
     * @param {QuotasApiQuotasUserIdRecalculatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApiInterface
     */
    quotasUserIdRecalculatePost(requestParameters: QuotasApiQuotasUserIdRecalculatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotasUserIdRecalculatePost200Response>;

    /**
     * Get system default quota configuration (admin only)
     * @summary Get system default quotas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApiInterface
     */
    systemDefaultQuotasGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemDefaultQuotasResponse>;

    /**
     * Update system default quota configuration (admin only)
     * @summary Update system default quotas
     * @param {QuotasApiSystemDefaultQuotasPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApiInterface
     */
    systemDefaultQuotasPut(requestParameters: QuotasApiSystemDefaultQuotasPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemDefaultQuotasUpdateResponse>;

}

/**
 * Request parameters for quotasGet operation in QuotasApi.
 * @export
 * @interface QuotasApiQuotasGetRequest
 */
export interface QuotasApiQuotasGetRequest {
    /**
     * User ID to get quotas for (admin only, defaults to current user)
     * @type {string}
     * @memberof QuotasApiQuotasGet
     */
    readonly userId?: string

    /**
     * Search term for username, email, or user ID (admin only)
     * @type {string}
     * @memberof QuotasApiQuotasGet
     */
    readonly search?: string
}

/**
 * Request parameters for quotasUserIdPut operation in QuotasApi.
 * @export
 * @interface QuotasApiQuotasUserIdPutRequest
 */
export interface QuotasApiQuotasUserIdPutRequest {
    /**
     * User ID to update quota for
     * @type {string}
     * @memberof QuotasApiQuotasUserIdPut
     */
    readonly userId: string

    /**
     * 
     * @type {QuotaUpdateRequest}
     * @memberof QuotasApiQuotasUserIdPut
     */
    readonly quotaUpdateRequest: QuotaUpdateRequest
}

/**
 * Request parameters for quotasUserIdRecalculatePost operation in QuotasApi.
 * @export
 * @interface QuotasApiQuotasUserIdRecalculatePostRequest
 */
export interface QuotasApiQuotasUserIdRecalculatePostRequest {
    /**
     * User ID to recalculate quotas for
     * @type {string}
     * @memberof QuotasApiQuotasUserIdRecalculatePost
     */
    readonly userId: string
}

/**
 * Request parameters for systemDefaultQuotasPut operation in QuotasApi.
 * @export
 * @interface QuotasApiSystemDefaultQuotasPutRequest
 */
export interface QuotasApiSystemDefaultQuotasPutRequest {
    /**
     * 
     * @type {SystemDefaultQuotasUpdateRequest}
     * @memberof QuotasApiSystemDefaultQuotasPut
     */
    readonly systemDefaultQuotasUpdateRequest: SystemDefaultQuotasUpdateRequest
}

/**
 * QuotasApi - object-oriented interface
 * @export
 * @class QuotasApi
 * @extends {BaseAPI}
 */
export class QuotasApi extends BaseAPI implements QuotasApiInterface {
    /**
     * Get quota information for the current user or specific user (admin only)
     * @summary Get user quotas
     * @param {QuotasApiQuotasGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    public quotasGet(requestParameters: QuotasApiQuotasGetRequest = {}, options?: RawAxiosRequestConfig) {
        return QuotasApiFp(this.configuration).quotasGet(requestParameters.userId, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update quota limit for a specific user (admin only)
     * @summary Update user quota
     * @param {QuotasApiQuotasUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    public quotasUserIdPut(requestParameters: QuotasApiQuotasUserIdPutRequest, options?: RawAxiosRequestConfig) {
        return QuotasApiFp(this.configuration).quotasUserIdPut(requestParameters.userId, requestParameters.quotaUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recalculate and update current usage for all quota types for a user (admin only)
     * @summary Recalculate user quota usage
     * @param {QuotasApiQuotasUserIdRecalculatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    public quotasUserIdRecalculatePost(requestParameters: QuotasApiQuotasUserIdRecalculatePostRequest, options?: RawAxiosRequestConfig) {
        return QuotasApiFp(this.configuration).quotasUserIdRecalculatePost(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system default quota configuration (admin only)
     * @summary Get system default quotas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    public systemDefaultQuotasGet(options?: RawAxiosRequestConfig) {
        return QuotasApiFp(this.configuration).systemDefaultQuotasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update system default quota configuration (admin only)
     * @summary Update system default quotas
     * @param {QuotasApiSystemDefaultQuotasPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    public systemDefaultQuotasPut(requestParameters: QuotasApiSystemDefaultQuotasPutRequest, options?: RawAxiosRequestConfig) {
        return QuotasApiFp(this.configuration).systemDefaultQuotasPut(requestParameters.systemDefaultQuotasUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

