/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Document } from '../models';
/**
 * ChatDocumentsApi - axios parameter creator
 * @export
 */
export const ChatDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get details of a specific document in a chat session
         * @summary Get chat document details
         * @param {string} chatId Chat session ID
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatsChatIdDocumentsDocumentIdGet: async (chatId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('chatsChatIdDocumentsDocumentIdGet', 'chatId', chatId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('chatsChatIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/chats/{chat_id}/documents/{document_id}`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a document file to a chat session for temporary knowledge augmentation
         * @summary Upload document to chat
         * @param {string} chatId Chat session ID
         * @param {File} file Document file to upload
         * @param {string} messageId Message ID to associate the document with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatsChatIdDocumentsPost: async (chatId: string, file: File, messageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('chatsChatIdDocumentsPost', 'chatId', chatId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('chatsChatIdDocumentsPost', 'file', file)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('chatsChatIdDocumentsPost', 'messageId', messageId)
            const localVarPath = `/chats/{chat_id}/documents`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication CookieAuth required

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatDocumentsApi - functional programming interface
 * @export
 */
export const ChatDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get details of a specific document in a chat session
         * @summary Get chat document details
         * @param {string} chatId Chat session ID
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatsChatIdDocumentsDocumentIdGet(chatId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatsChatIdDocumentsDocumentIdGet(chatId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatDocumentsApi.chatsChatIdDocumentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload a document file to a chat session for temporary knowledge augmentation
         * @summary Upload document to chat
         * @param {string} chatId Chat session ID
         * @param {File} file Document file to upload
         * @param {string} messageId Message ID to associate the document with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatsChatIdDocumentsPost(chatId: string, file: File, messageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatsChatIdDocumentsPost(chatId, file, messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatDocumentsApi.chatsChatIdDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatDocumentsApi - factory interface
 * @export
 */
export const ChatDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatDocumentsApiFp(configuration)
    return {
        /**
         * Get details of a specific document in a chat session
         * @summary Get chat document details
         * @param {ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatsChatIdDocumentsDocumentIdGet(requestParameters: ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.chatsChatIdDocumentsDocumentIdGet(requestParameters.chatId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a document file to a chat session for temporary knowledge augmentation
         * @summary Upload document to chat
         * @param {ChatDocumentsApiChatsChatIdDocumentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatsChatIdDocumentsPost(requestParameters: ChatDocumentsApiChatsChatIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.chatsChatIdDocumentsPost(requestParameters.chatId, requestParameters.file, requestParameters.messageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatDocumentsApi - interface
 * @export
 * @interface ChatDocumentsApi
 */
export interface ChatDocumentsApiInterface {
    /**
     * Get details of a specific document in a chat session
     * @summary Get chat document details
     * @param {ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatDocumentsApiInterface
     */
    chatsChatIdDocumentsDocumentIdGet(requestParameters: ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document>;

    /**
     * Upload a document file to a chat session for temporary knowledge augmentation
     * @summary Upload document to chat
     * @param {ChatDocumentsApiChatsChatIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatDocumentsApiInterface
     */
    chatsChatIdDocumentsPost(requestParameters: ChatDocumentsApiChatsChatIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document>;

}

/**
 * Request parameters for chatsChatIdDocumentsDocumentIdGet operation in ChatDocumentsApi.
 * @export
 * @interface ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest
 */
export interface ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest {
    /**
     * Chat session ID
     * @type {string}
     * @memberof ChatDocumentsApiChatsChatIdDocumentsDocumentIdGet
     */
    readonly chatId: string

    /**
     * Document ID
     * @type {string}
     * @memberof ChatDocumentsApiChatsChatIdDocumentsDocumentIdGet
     */
    readonly documentId: string
}

/**
 * Request parameters for chatsChatIdDocumentsPost operation in ChatDocumentsApi.
 * @export
 * @interface ChatDocumentsApiChatsChatIdDocumentsPostRequest
 */
export interface ChatDocumentsApiChatsChatIdDocumentsPostRequest {
    /**
     * Chat session ID
     * @type {string}
     * @memberof ChatDocumentsApiChatsChatIdDocumentsPost
     */
    readonly chatId: string

    /**
     * Document file to upload
     * @type {File}
     * @memberof ChatDocumentsApiChatsChatIdDocumentsPost
     */
    readonly file: File

    /**
     * Message ID to associate the document with
     * @type {string}
     * @memberof ChatDocumentsApiChatsChatIdDocumentsPost
     */
    readonly messageId: string
}

/**
 * ChatDocumentsApi - object-oriented interface
 * @export
 * @class ChatDocumentsApi
 * @extends {BaseAPI}
 */
export class ChatDocumentsApi extends BaseAPI implements ChatDocumentsApiInterface {
    /**
     * Get details of a specific document in a chat session
     * @summary Get chat document details
     * @param {ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatDocumentsApi
     */
    public chatsChatIdDocumentsDocumentIdGet(requestParameters: ChatDocumentsApiChatsChatIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig) {
        return ChatDocumentsApiFp(this.configuration).chatsChatIdDocumentsDocumentIdGet(requestParameters.chatId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a document file to a chat session for temporary knowledge augmentation
     * @summary Upload document to chat
     * @param {ChatDocumentsApiChatsChatIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatDocumentsApi
     */
    public chatsChatIdDocumentsPost(requestParameters: ChatDocumentsApiChatsChatIdDocumentsPostRequest, options?: RawAxiosRequestConfig) {
        return ChatDocumentsApiFp(this.configuration).chatsChatIdDocumentsPost(requestParameters.chatId, requestParameters.file, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }
}

